import org.gradle.api.artifacts.Configuration

allprojects { Project project ->
    // make 'build/generated-sources/*' optional source directories
    project.plugins.matching { it == project.plugins.findPlugin('eclipse') }.all {
        project.plugins.matching { it == project.plugins.findPlugin('asakusafw') }.all {
            logger.info "Configuring Eclipse for Asakusa Framework: ${project.name}"
            def conv = project.asakusafw
            def modelgenSrc = project.relativePath(conv.modelgen.modelgenSourceDirectory ?: '').replace('\\', '/')
            def annotationSrc = project.relativePath(conv.javac.annotationSourceDirectory ?: '').replace('\\', '/')
            project.eclipse.classpath {
                file.withXml { provider ->
                    provider.asNode().children().findAll{
                        it.name() == 'classpathentry' \
                        && it.@kind == 'src' \
                        && it.@path \
                        && ( it.@path == modelgenSrc || it.@path == annotationSrc )
                    }.collect {
                        it.children().find { it.name() == 'attributes' } ?: it.appendNode('attributes')
                    }.collect {
                        it.children().find { it.name() == 'attribute' && it.@name == 'optional' } ?: it.appendNode('attribute', [name: 'optional'])
                    }.each {
                        it.@value = 'true'
                    }
                    provider.asNode().children().findAll{
                        it.name() == 'classpathentry' \
                        && it.@kind == 'lib' \
                        && it.@path
                    }.collect {
                        it.children().find { it.name() == 'attributes' } ?: it.appendNode('attributes')
                    }.collect {
                        it.children().find { it.name() == 'attribute' && it.@name == 'source_encoding' } ?: it.appendNode('attribute', [name: 'source_encoding'])
                    }.each {
                        it.@value = 'UTF-8'
                    }
                }
            }
        }
    }

    // enables emulation mode in testing
    project.plugins.matching { it == project.plugins.findPlugin('asakusafw') }.all {
        def key = 'com.asakusafw.shafu.asakusafw.enableEmulationMode'
        def value = System.getProperty(key, 'false')
        if (value == null || value.equalsIgnoreCase('true') == false) {
            return
        }
        project.afterEvaluate {
            logger.info "enabling emulation mode for Asakusa Framework: ${project.name}"
            String version
            try {
                version = project.asakusafw.asakusafwVersion.toString()
            } catch (Exception e) {
                logger.info "failed to resolve asakusafwVersion: ${project.name}", e
                return
            }
            project.configurations {
                shafuEmulationModeExtension
            }
            project.dependencies {
                shafuEmulationModeExtension "com.asakusafw.sdk:asakusa-sdk-test-emulation:${version}"
            }
            logger.info "try resolving modules for emulation mode: ${project.name}"
            Configuration conf = project.configurations.shafuEmulationModeExtension
            try {
                conf.resolve()
                if (conf.state != Configuration.State.RESOLVED) {
                    throw new IllegalStateException()
                }
            } catch (Exception e) {
                logger.info "emulation support module is not provided (${version}): ${project.name}"
                logger.debug "state of ${conf.name}: ${conf.state}", e
                return
            }
            logger.info "activating modules for emulation mode: ${project.name}"
            project.configurations.testRuntime {
                extendsFrom project.configurations.shafuEmulationModeExtension
            }
        }
    }

    // adding a task for installing batchapps
    project.plugins.matching { it == project.plugins.findPlugin('asakusafw') }.all {
        project.afterEvaluate {
            project.tasks.create('shafuInstallBatchapps') {
                description 'installs Asakusa batchapps into development environment'
                dependsOn project.tasks.compileBatchapp
                doLast {
                    File batchapps
                    if (System.getenv('ASAKUSA_BATCHAPPS_HOME') != null) {
                        batchapps = new File(System.getenv('ASAKUSA_BATCHAPPS_HOME'))
                    } else if (System.getenv('ASAKUSA_HOME') != null) {
                        File home = new File(System.getenv('ASAKUSA_HOME'))
                        if (home.exists() == false) {
                            logger.error 'Asakusa Framework is not installed'
                            throw new IllegalStateException('Asakusa Framework is not installed')
                        }
                        batchapps = new File(home, 'batchapps')
                    } else {
                        logger.error 'ASAKUSA_HOME is not defined'
                        throw new IllegalStateException('ASAKUSA_HOME is not defined')
                    }
                    project.tasks.compileBatchapp.outputDirectory.eachDir { File app ->
                        File target = new File(batchapps, app.getName())
                        if (target.exists()) {
                            project.delete target
                        }
                        logger.lifecycle "installing batchapp: ${target}"
                        project.copy {
                            from app
                            into target
                        }
                    }
                }
            }
        }
    }
}
