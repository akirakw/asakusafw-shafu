import org.gradle.api.artifacts.Configuration

allprojects { Project project ->
    def withAsakusa = { cl ->
        Closure once = cl
        cl = {
            once.call()
            once = {}
        }
        if (project.plugins.respondsTo("withId")) {
            project.plugins.withId('asakusafw') {
                cl.call()
            }
            project.plugins.withId('asakusafw-sdk') {
                cl.call()
            }
        } else {
            project.plugins.matching { it == project.plugins.findPlugin('asakusafw') }.all {
                cl.call()
            }
            project.plugins.matching { it == project.plugins.findPlugin('asakusafw-sdk') }.all {
                cl.call()
            }
        }
    }
    // make 'build/generated-sources/*' optional source directories
    project.plugins.withType(EclipsePlugin) {
        withAsakusa {
            logger.info "Configuring Eclipse for Asakusa Framework: ${project.name}"
            def conv = project.asakusafw
            def modelgenSrc = project.relativePath(conv.modelgen.modelgenSourceDirectory ?: '').replace('\\', '/')
            def annotationSrc = project.relativePath(conv.javac.annotationSourceDirectory ?: '').replace('\\', '/')
            def putAttribute = { attrs, name, value ->
                attrs.collect {
                    it.children().find { it.name() == 'attribute' && it.@name == name } ?: it.appendNode('attribute', [name: name])
                }.each {
                    it.@value = value
                }
            }
            project.eclipse.classpath {
                file.withXml { provider ->
                    def genSrcAttributes = provider.asNode().children().findAll{
                        it.name() == 'classpathentry' \
                        && it.@kind == 'src' \
                        && it.@path \
                        && ( it.@path == modelgenSrc || it.@path == annotationSrc )
                    }.collect {
                        it.children().find { it.name() == 'attributes' } ?: it.appendNode('attributes')
                    }
                    def libAttributes = provider.asNode().children().findAll{
                        it.name() == 'classpathentry' \
                        && it.@kind == 'lib' \
                        && it.@path
                    }.collect {
                        it.children().find { it.name() == 'attributes' } ?: it.appendNode('attributes')
                    }
                    putAttribute(genSrcAttributes, 'optional', 'true')
                    putAttribute(genSrcAttributes, 'ignore_optional_problems', 'true')
                    putAttribute(libAttributes, 'source_encoding', 'UTF-8')
                }
            }
        }
    }

    // adding a task for installing batchapps
    withAsakusa {
        project.afterEvaluate {
            project.tasks.create('shafuInstallBatchapps') {
                description 'installs Asakusa batchapps into development environment'
                dependsOn project.tasks.jarBatchapp
                doLast {
                    File batchapps
                    if (System.getenv('ASAKUSA_BATCHAPPS_HOME') != null) {
                        batchapps = new File(System.getenv('ASAKUSA_BATCHAPPS_HOME'))
                    } else if (System.getenv('ASAKUSA_HOME') != null) {
                        File home = new File(System.getenv('ASAKUSA_HOME'))
                        if (home.exists() == false) {
                            logger.error 'Asakusa Framework is not installed'
                            throw new IllegalStateException('Asakusa Framework is not installed')
                        }
                        batchapps = new File(home, 'batchapps')
                    } else {
                        logger.error 'ASAKUSA_HOME is not defined'
                        throw new IllegalStateException('ASAKUSA_HOME is not defined')
                    }
                    logger.lifecycle "installing batchapp: ${project.tasks.jarBatchapp.archivePath}"
                    project.sync {
                        from project.zipTree(project.tasks.jarBatchapp.archivePath).matching {
                            exclude 'META-INF/**'
                        }
                        into batchapps
                    }
                }
            }
        }
    }

    // replace maven repository url that use http with https
    def targetHosts = [
        'repo1.maven.org',
        'repo.maven.apache.org',
        'asakusafw.s3.amazonaws.com'
    ]
    project.repositories.withType(MavenArtifactRepository) { repository ->
        if ( repository.url.scheme == 'http' && targetHosts.contains(repository.url.host) ) {
            URI newUrl = new URI("https", repository.url.authority, repository.url.path, repository.url.query, repository.url.fragment)
            logger.info("Replace repository url: ${repository.url} -> ${newUrl}")
            repository.url = newUrl
        }
    }
}
